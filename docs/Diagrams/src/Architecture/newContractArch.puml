@startuml newContractArch

title Proposed New Contracts Architecture

namespace Bets {
    namespace BetInterfaces {
        interface Wager {
            address: Address
            amount: UFix64
        }

        interface State {
            isResolved: bool
            wagers: Wager[]
        }

        interface Token {
            address: Address
            betId: string
            wager: FUSDVault
        }

        interface Result {

        }

        interface Bet {
            + state: State
            mintToken(token: @DelphaiResources::Token): TokenResponse
            placeWager(token: @Token)
            resolve(result: Result): PayoutInterfaces::Result
        }
    }

    namespace YesNoBetContract {
        class Wager {
            address: Address
            bet: bool
            wager: UFi64
        }

        class UserToken {
            address: Address
            betId: string
            bet: bool
            wager: FUSDVault
        }

        class State {
            isResolved: bool
            wagers: Wager[]
        }

        class Result {
            outcome: bool?
        }

        class BetResource {
            + state: State
            
            mintToken(token: @DelphaiResources::Token): &BetInterfaces::Token
            placeWager(token: @Token): TokenResponse
            resolve(): bool
        }
    }
}

namespace Resolvers {
    namespace ResolverInterfaces {
        interface Token {
            betId: string
            address: Address
        }

        interface Result {
            betId: string
        }

        interface Resolver {
            mintToken(token: @DelphaiResources::Token): &Token
            vote(token: @Token)
            resolve(): Result?
        }
    }

    namespace YesNoResolverContract {
        class UserToken {
            betId: string
            address: Address
            vote: bool?
        }

        class State {
            isResolved: bool
            votes: Vote[]
        }

        class Result {
            betId: string
            result: bool
        }

        class Vote {
            address: Address
            vote: bool?
        }

        class MajorityResolver {
            + state: State
            
            mintToken(token: @DelphaiResources::Token): @ResolverInterfaces::Token
            vote(token: @Token)
            resolve(): Result?
        }
    }
}

namespace Payouts {
    namespace PayoutInterfaces {
        interface Token {
            betId: string
            address: Address
        }

        interface Results {
            betId: string
        }

        interface Payout {
            +balance: UFix64
            mintToken(token: @DelphaiResources::Token): @Token
            deposit(from: @Vault)
            resolve(results: Results)
            withdraw(token: &Token): @Vault
        }

        class State {
            isResolved: bool
            payouts: UserPayout[]
        }

        class UserPayout {
            balance: UFix64
            hasRetrieved: bool
        }
    }

    namespace WinLosePayoutContract {
        class Bettor {
            address: Address
            wager: UFix64
        }

        class Results {
            betId: string
            winners: Bettor[]
            losers: Bettor[]
        }

        class UserToken {
            betId: string
            address: Address
        }

        class PayoutResource {
            +balance: UFix64
            mintToken(token: @DelphaiResources::Token): @PayoutInterfaces::Token
            deposit(from: @Vault)
            resolve(results: PayoutInterfaces::Results)
            withdraw(token: &PayoutInterfaces::Token): @Vault
        }
    }
}

namespace DelphaiResources {
    class Token {
        address: Address
        betId: string
    }

    class User {
        createToken(betId: string): @Token
    }
}

namespace Composer {
    class State {
        betState: BetInterfaces::State
        resolverState: ResolverInterfaces::State
        payoutState: PayoutInterfaces::State
    }

    class MintResults {
        getBetToken(): @BetInterfaces::Token
        getResolverToken(): @ResolverInterfaces::Token
        getPayoutToken(): @PayoutInterfaces::Token
    }

    interface PublicComposer {
        getState(): State
        mintTokens(token: @DelphaiResources.Token): @MintResults
        placeWager(token: @BetInterfaces.Token)
        castVote(token: @ResolverInterfaces.Token)
        resolve()
        retrievePayout(token: @PayoutInterfaces.Token): @Vault
    }

    class BetComposer {
        - bet: BetInterfaces::Bet
        - resolver: ResolverInterfaces::Resolver
        - payout: PayoutInterfaces::Payout
        getState(): State
        mintTokens(token: @DelphaiResources.Token): @MintResults
        placeWager(token: @BetInterfaces.Token)
        castVote(token: @ResolverInterfaces.Token)
        resolve()
        retrievePayout(token: @PayoutInterfaces.Token): @Vault
    }
}

Payouts.PayoutInterfaces.Payout --> Payouts.PayoutInterfaces.Token
Payouts.PayoutInterfaces.Payout --> Payouts.PayoutInterfaces.Results
Payouts.PayoutInterfaces.Payout --> Payouts.PayoutInterfaces.State
Payouts.PayoutInterfaces.Payout -up--> DelphaiResources.Token
Payouts.PayoutInterfaces.State --* Payouts.PayoutInterfaces.UserPayout
Payouts.WinLosePayoutContract.PayoutResource -up--|> Payouts.PayoutInterfaces.Payout
Payouts.WinLosePayoutContract.PayoutResource --> Payouts.WinLosePayoutContract.Results
Payouts.WinLosePayoutContract.Results --* Payouts.WinLosePayoutContract.Bettor
Payouts.WinLosePayoutContract.Results -up--|> Payouts.PayoutInterfaces.Results
Payouts.WinLosePayoutContract.UserToken -up--|> Payouts.PayoutInterfaces.Token
Payouts.WinLosePayoutContract.PayoutResource -up--> Payouts.WinLosePayoutContract.UserToken

Bets.BetInterfaces.Bet --> Bets.BetInterfaces.Token
Bets.BetInterfaces.Bet --> Payouts.PayoutInterfaces.Results
Bets.BetInterfaces.Bet --* Bets.BetInterfaces.State
Bets.BetInterfaces.State --* Bets.BetInterfaces.Wager
Bets.BetInterfaces.Bet --> Bets.BetInterfaces.Result
Bets.BetInterfaces.Bet -up--> DelphaiResources.Token
Bets.YesNoBetContract.BetResource -up--|> Bets.BetInterfaces.Bet
Bets.YesNoBetContract.BetResource --* Bets.YesNoBetContract.State
Bets.YesNoBetContract.State --* Bets.YesNoBetContract.Wager
Bets.YesNoBetContract.BetResource -up--> Bets.YesNoBetContract.UserToken
Bets.YesNoBetContract.UserToken -up--|> Bets.BetInterfaces.Token
Bets.YesNoBetContract.State -up--|> Bets.BetInterfaces.State
Bets.YesNoBetContract.Result -up--|> Bets.BetInterfaces.Result
Bets.YesNoBetContract.BetResource --> Bets.YesNoBetContract.Result
Bets.YesNoBetContract.Wager -up--|> Bets.BetInterfaces.Wager
Bets.YesNoBetContract.BetResource --> Payouts.WinLosePayoutContract.Results

Resolvers.ResolverInterfaces.Resolver --> Resolvers.ResolverInterfaces.Token
Resolvers.ResolverInterfaces.Resolver --> Resolvers.ResolverInterfaces.Result
Resolvers.ResolverInterfaces.Resolver -up--> DelphaiResources.Token
Resolvers.ResolverInterfaces.Resolver --> Bets.BetInterfaces.Result
Resolvers.YesNoResolverContract.MajorityResolver -up--|> Resolvers.ResolverInterfaces.Resolver
Resolvers.YesNoResolverContract.MajorityResolver --> Resolvers.YesNoResolverContract.UserToken
Resolvers.YesNoResolverContract.UserToken -up--|> Resolvers.ResolverInterfaces.Token
Resolvers.YesNoResolverContract.MajorityResolver --* Resolvers.YesNoResolverContract.State
Resolvers.YesNoResolverContract.State --* Resolvers.YesNoResolverContract.Vote
Resolvers.YesNoResolverContract.MajorityResolver --> Resolvers.YesNoResolverContract.Result
Resolvers.YesNoResolverContract.Result -up--|> Resolvers.ResolverInterfaces.Result
Resolvers.YesNoResolverContract.MajorityResolver --> Bets.YesNoBetContract.Result

DelphaiResources.User --> DelphaiResources.Token

Composer.BetComposer -up--|> Composer.PublicComposer
Composer.PublicComposer -up--> Composer.MintResults
Composer.PublicComposer -up--> Composer.State
Composer.BetComposer -down--* Bets.BetInterfaces.Bet
Composer.BetComposer -down--* Resolvers.ResolverInterfaces.Resolver
Composer.BetComposer -down--* Payouts.PayoutInterfaces.Payout
Composer.BetComposer --> DelphaiResources.Token

@enduml
