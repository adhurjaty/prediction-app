@startuml newContractArch

title Proposed New Contracts Architecture

namespace BetInterfaces {
    interface WagerToken {
        address: Address
        betId: string
        wager: FUSDVault
    }

    interface Result {
        betId: string
    }

    interface Bet {
        placeBet(token: &WagerToken)
        resolveBet(token: &Result): &PayoutInterfaces::ResultsToken
    }
}

namespace YesNoBetContract {
    class Wager {
        address: Address
        bet: bool
        wager: UFi64
    }

    class WagerToken {
        address: Address
        betId: string
        bet: bool
        wager: FUSDVault
    }

    class ResultToken {
        betId: string
        result: bool
    }

    class BetResource {
        - wagers: Wager[]
        
        placeBet(token: &BetInterfaces::WagerToken)
        resolveBet(token: &BetInterfaces::Result): &PayoutInterfaces::ResultsToken
    }
}

namespace ResolverInterfaces {
    interface ResolutionToken {
        betId: string
        address: Address
    }

    interface Resolver {
        vote(token: &ResolutionToken)
        resolve(): &BetInterfaces::Result?
    }
}

namespace YesNoResolverContract {
    class ResolutionToken {
        betId: string
        address: Address
        vote: bool
    }

    class MajorityResolver {
        - votes: ResolutionToken[]
        
        vote(token: &ResolutionToken)
        resolve(): &BetInterfaces::Result?
    }
}

namespace PayoutInterfaces {
    class PayoutToken {
        betId: string
        address: Address
    }

    interface ResultsToken {
        betId: string
    }

    interface Payout {
        +balance: UFix64
        deposit(from: @Vault)
        resolve(token: &ResultsToken)
        withdraw(token: @PayoutToken): @Vault
    }
}

namespace WinLosePayoutContract {
    class Bettor {
        address: Address
        wager: UFix64
    }

    class BetResults {
        betId: string
        winners: Bettor[]
        losers: Bettor[]
    }

    class PayoutResource {
        - betResult: PayoutContract::BetResult
        +balance: UFix64
        deposit(from: @Vault)
        resolve(results: &PayoutInterfaces::ResultsToken)
        withdraw(token: @PayoutInterfaces::PayoutToken): @Vault
    }
}


PayoutInterfaces.Payout --> PayoutInterfaces.PayoutToken
PayoutInterfaces.Payout --> PayoutInterfaces.ResultsToken
WinLosePayoutContract.PayoutResource --|> PayoutInterfaces.Payout
WinLosePayoutContract.PayoutResource --> WinLosePayoutContract.BetResults
WinLosePayoutContract.BetResults --* WinLosePayoutContract.Bettor
WinLosePayoutContract.BetResults --|> PayoutInterfaces.ResultsToken

BetInterfaces.Bet --> BetInterfaces.WagerToken
BetInterfaces.Bet --> BetInterfaces.Result
BetInterfaces.Bet --> PayoutInterfaces.ResultsToken
YesNoBetContract.BetResource --|> BetInterfaces.Bet
YesNoBetContract.BetResource --* YesNoBetContract.Wager
YesNoBetContract.BetResource --> YesNoBetContract.WagerToken
YesNoBetContract.BetResource --> YesNoBetContract.ResultToken
YesNoBetContract.BetResource --o WinLosePayoutContract.BetResults
YesNoBetContract.WagerToken --|> BetInterfaces.WagerToken
YesNoBetContract.ResultToken --|> BetInterfaces.Result

ResolverInterfaces.Resolver --> ResolverInterfaces.ResolutionToken
ResolverInterfaces.Resolver --> BetInterfaces.Result
YesNoResolverContract.MajorityResolver --|> ResolverInterfaces.Resolver
YesNoResolverContract.MajorityResolver --* YesNoResolverContract.ResolutionToken
YesNoResolverContract.MajorityResolver --o YesNoBetContract.ResultToken
@enduml
