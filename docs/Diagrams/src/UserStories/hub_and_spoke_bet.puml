@startuml Hub and Spoke Bet

actor Hub as hub
actor "Spoke(s)" as spoke
participant "Commissioner/API" as backend
participant Blockchain as bc
participant "Bet (SC)" as bet
participant "Resolver (SC)" as resolver
database Database as db

group Bet setup
    hub -> spoke : Negotiate terms offline? Bet amounts and outcomes
    hub -> backend : Create hub and spoke bet with title, outcomes, odds (eventually)
    backend -> bc : BetAgainstMe(title, my_outcome, their_outcome)
    backend -> bc : Resolver(bet address)
    backend -> bet : Bet.setResolver(resolver address)
    backend -> resolver : Resolver.setOutcome(outcome)
    backend -> bet : Bet.addMember(spoke)
    backend -> resolver : Resolver.addMember(spoke)
end

group Betting phase
    hub -> bet : Increase available "house" funds - Bet.wager(amount)
    backend -> spoke : New bet available
    spoke -> bet : Bet against the hub - Bet.wager(amount)
    spoke -> bet : blah
end

group Resolution phase (fully described in separate diagram)
    hub -> backend : Vote to resolve
    backend -> resolver : Hub vote to resolve
    resolver -[#blue]> backend : <b>Event</b> VoteRecorded, VoteCount
    spoke -> backend : Vote to resolve
    backend -> resolver : Spokes vote to resolve
    resolver -[#blue]> backend : <b>Event</b> VoteRecorded, VoteCount
    
    resolver -> resolver : Tabulate votes
    resolver -[#blue]> backend : <b>Event</b> OutcomeCount
    resolver -[#blue]> backend : <b>Event</b> ResolutionOutcomedReached or ResolutionOutcomeNotReached
end

group Payouts [If hub won]
    backend -> bet : Payout hub
    bet -> hub : Payout everything
    bet -[#blue]> backend : <b>Event</b> PayMember
else Spokes won
    backend -> bet : Payout spokes
    bet -> spoke : Payout based on each spoke's wager
    bet -[#blue]> backend : <b>Event</b> PayMember(spoke, amount)
    bet -> hub : Return remaining pool funds to hub
    bet -[#blue]> backend : <b>Event</b> PayMember(hub, amount)
end

backend -> bet : Log and clean up Bet
backend -> resolver : Log and clean up Resolver

@enduml