/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EqualAntePropositionInterface extends ethers.utils.Interface {
  functions: {
    "addMember(address)": FunctionFragment;
    "bet_closing_time()": FunctionFragment;
    "checkMembership(address)": FunctionFragment;
    "getMyBet()": FunctionFragment;
    "pool()": FunctionFragment;
    "resolution_time()": FunctionFragment;
    "title()": FunctionFragment;
    "wager()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bet_closing_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkMembership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMyBet", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolution_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(functionFragment: "wager", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bet_closing_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolution_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wager", data: BytesLike): Result;

  events: {};
}

export class EqualAnteProposition extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EqualAntePropositionInterface;

  functions: {
    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    addMember(
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    "addMember(address)"(
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    bet_closing_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    "bet_closing_time()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    checkMembership(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    "checkMembership(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks a bet to the pool
     */
    getMyBet(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Checks a bet to the pool
     */
    "getMyBet()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Total amount wagered in the pool
     */
    pool(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Total amount wagered in the pool
     */
    "pool()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    resolution_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    "resolution_time()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    title(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    "title()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Adds a bet to the pool
     */
    "wager()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Adds a bet to the pool if the amount to be wagered is exactly 1
     * @param amount Amount to be wagered
     */
    "wager(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds a member to the contract
   * @param newMember Address of new member
   */
  addMember(
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Adds a member to the contract
   * @param newMember Address of new member
   */
  "addMember(address)"(
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Time when the proposition will be resolved (s since epoch)
   */
  bet_closing_time(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Time when the proposition will be resolved (s since epoch)
   */
  "bet_closing_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Checks account membership to the contract
   * @param account Address of the account to be checked
   */
  checkMembership(account: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Checks account membership to the contract
   * @param account Address of the account to be checked
   */
  "checkMembership(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks a bet to the pool
   */
  getMyBet(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Checks a bet to the pool
   */
  "getMyBet()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Total amount wagered in the pool
   */
  pool(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Total amount wagered in the pool
   */
  "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Time when the proposition will be closed to new bets (s since epoch)
   */
  resolution_time(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Time when the proposition will be closed to new bets (s since epoch)
   */
  "resolution_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Description of the proposition, e.g. "What will the price of ETH be?"
   */
  title(overrides?: CallOverrides): Promise<string>;

  /**
   * Description of the proposition, e.g. "What will the price of ETH be?"
   */
  "title()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Adds a bet to the pool
   */
  "wager()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Adds a bet to the pool if the amount to be wagered is exactly 1
   * @param amount Amount to be wagered
   */
  "wager(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    addMember(newMember: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    "addMember(address)"(
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    bet_closing_time(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    "bet_closing_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    checkMembership(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    "checkMembership(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks a bet to the pool
     */
    getMyBet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks a bet to the pool
     */
    "getMyBet()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Total amount wagered in the pool
     */
    pool(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Total amount wagered in the pool
     */
    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    resolution_time(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    "resolution_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    title(overrides?: CallOverrides): Promise<string>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    "title()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Adds a bet to the pool
     */
    "wager()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Adds a bet to the pool if the amount to be wagered is exactly 1
     * @param amount Amount to be wagered
     */
    "wager(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    addMember(
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    "addMember(address)"(
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    bet_closing_time(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    "bet_closing_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    checkMembership(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    "checkMembership(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks a bet to the pool
     */
    getMyBet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks a bet to the pool
     */
    "getMyBet()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Total amount wagered in the pool
     */
    pool(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Total amount wagered in the pool
     */
    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    resolution_time(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    "resolution_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    title(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    "title()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Adds a bet to the pool
     */
    "wager()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Adds a bet to the pool if the amount to be wagered is exactly 1
     * @param amount Amount to be wagered
     */
    "wager(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    addMember(
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Adds a member to the contract
     * @param newMember Address of new member
     */
    "addMember(address)"(
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    bet_closing_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Time when the proposition will be resolved (s since epoch)
     */
    "bet_closing_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    checkMembership(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks account membership to the contract
     * @param account Address of the account to be checked
     */
    "checkMembership(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks a bet to the pool
     */
    getMyBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks a bet to the pool
     */
    "getMyBet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Total amount wagered in the pool
     */
    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Total amount wagered in the pool
     */
    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    resolution_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Time when the proposition will be closed to new bets (s since epoch)
     */
    "resolution_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Description of the proposition, e.g. "What will the price of ETH be?"
     */
    "title()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Adds a bet to the pool
     */
    "wager()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Adds a bet to the pool if the amount to be wagered is exactly 1
     * @param amount Amount to be wagered
     */
    "wager(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
